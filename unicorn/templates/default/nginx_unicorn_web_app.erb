upstream unicorn_<%= @application[:domains].first %> {
 server unix:<%= @application[:deploy_to]%>/shared/sockets/unicorn.sock fail_timeout=0;
}

# [RIGOR MODIFICATIONS]

# Determine what max-age to use in the Cache-Control HTTP header for asset requests
map $request_uri $asset_expires {
  default    86400;                 # no cachebuster; e.g. /assets/styles.css; 1 day
  ~\?[0-9]+$ 31536000;              # query string cachebuster; e.g. /css/styles.css?12345; 1 year
  ~^/assets/.*-[a-f|0-9]+ 31536000; # digest cachebuster; e.g. /assets/styles-abc12345.css; 1 year
}

# If applicable (determined by regexp below), send back Access-Control-Allow-Origin header to match request's Origin
# header.
map $http_origin $allow_origin {
  default "";
  ~<%= node[:nginx][:cors_origin_regex] || "^http(s?):\\/\\/(.*\\.)?rigor\\.com$" %> $http_origin;
}
# [END RIGOR MODIFICATION]

server {
  listen 80;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;

  <% if @application[:log_format] %>
    <% @application[:log_format].each do |log_format_name| %>
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.<%= log_format_name %>.log <%= log_format_name %>;
    <% end %>
  <% else %>
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>.access.log;
  <%end %>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    try_files $uri/index.html $uri/index.htm @unicorn;
  }

  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  # [RIGOR MODIFICATION] Give static assets far-future expiration headers and add appopriate CORS headers.

  # See http://guides.rubyonrails.org/asset_pipeline.html#far-future-expires-header
  #
  #   We are not using the "expires" directive because variables can't be used with it until nginx 1.7.9, and the
  #   "Expires" HTTP header is only useful for HTTP/1.0 anyway.
  #
  #   In addition to files under /assets, we need to handle those not yet moved into the asset pipeline (hence the crazy
  #   regexp).
  location ~ (^/assets/)|(.+\.(ico|css|js|gif|jpe?g|png|eot|woff|ttf|svg|map)$) {
    add_header Cache-Control "public; max-age=${asset_expires}";
    add_header ETag "";

    add_header Access-Control-Allow-Origin $allow_origin;
    add_header Access-Control-Allow-Methods "GET, HEAD";
  }

  # Allow universal access to fontawesome fonts
  location ~ ^/assets/fontawesome.* {
    add_header Cache-Control "public; max-age=${asset_expires}";
    add_header ETag "";

    add_header Access-Control-Allow-Origin "*";
    add_header Access-Control-Allow-Methods "GET, HEAD";
  }

  # Instantly reject all PHP requests to prevent bots from ever actually reaching the app
  # calling internal, redirects them to the rigor-branded 404 page
  location ~ \.php$ {
    internal;
  }

  error_page 404 /404.html

  # [END RIGOR MODIFICATION]

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }
}

<% if @application[:ssl_support] %>
server {
  listen   443;
  server_name <%= @application[:domains].join(" ") %> <%= node[:hostname] %>;
  access_log <%= node[:nginx][:log_dir] %>/<%= @application[:domains].first %>-ssl.access.log;

  ssl on;
  ssl_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.crt;
  ssl_certificate_key /etc/nginx/ssl/<%= @application[:domains].first %>.key;
  <% if @application[:ssl_certificate_ca] -%>
  ssl_client_certificate /etc/nginx/ssl/<%= @application[:domains].first %>.ca;
  <% end -%>

  keepalive_timeout 5;

  root <%= @application[:absolute_document_root] %>;

  <% if @application[:nginx] && @application[:nginx][:client_max_body_size] %>
    client_max_body_size <%= @application[:nginx][:client_max_body_size] %>;
  <% end %>

  location / {
    try_files $uri/index.html $uri/index.htm @unicorn;
  }

  location @unicorn {
    proxy_set_header X-Forwarded-Proto https;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;

  <% if node[:nginx] && node[:nginx][:proxy_read_timeout] -%>
    proxy_read_timeout <%= node[:nginx][:proxy_read_timeout] %>;
  <% end -%>
  <% if node[:nginx] && node[:nginx][:proxy_send_timeout] -%>
    proxy_send_timeout <%= node[:nginx][:proxy_send_timeout] %>;
  <% end -%>

    # If you don't find the filename in the static files
    # Then request it from the unicorn server
    if (!-f $request_filename) {
      proxy_pass http://unicorn_<%= @application[:domains].first %>;
      break;
    }
  }

  error_page 500 502 503 504 /500.html;
  location = /500.html {
    root <%= @application[:absolute_document_root] %>;
  }
}
<% end %>
